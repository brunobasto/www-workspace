configure(subprojects.findAll {it.getRootProject().property('liferay.workspace.modules.dir').contains(it.getParent().name)}) { -> project
	task dockerDeploy(type: Exec, dependsOn: 'build') {
		doLast {
			def bndFile = file("bnd.bnd")
			def jsonFile = file('package.json')
			def srcPath = ""
			def workspace = project.getRootProject()

			if (bndFile.exists()) {
				def props = new Properties()

				bndFile.withInputStream { props.load(it) }

				def bundleName = props.getProperty("Bundle-SymbolicName")
				def bundleVersion = props.getProperty("Bundle-Version")

				srcPath = "build/libs/${bundleName}-${bundleVersion}.jar"
			}

			if (jsonFile.exists()) {
				def json = new groovy.json.JsonSlurper().parseText(jsonFile.text)

				def name = json.name

				srcPath = "dist/${name}.war"
			}

			if (srcPath != "") {
				exec {
					commandLine "docker", "cp", srcPath, "${workspace.property('docker.liferay.container.name')}:${workspace.property('docker.liferay.home')}/deploy"
				}

				exec {
					commandLine "echo", "Copying ${srcPath} to ${workspace.property('docker.liferay.container.name')} docker container"
				}
			}
		}

		commandLine "echo", "Deploying ${project.name}"
	}
}

allprojects { -> project
	task dockerBuild(type: Exec) {
		doLast {
			exec {
				workingDir "${project.getRootDir()}/docker/local"
				commandLine "gradle", "build"
			}
		}

		commandLine "echo", "Building docker containers"
	}

	task dockerDown(type: Exec) {
		doLast {
			exec {
				workingDir "${project.getRootDir()}/docker/local"
				commandLine "gradle", "down"
			}
		}

		commandLine "echo", "Bringing docker containers down"
	}

	task dockerStart(type: Exec) {
		doLast {
			exec {
				workingDir "${project.getRootDir()}/docker/local"
				commandLine "gradle", "start"
			}
		}

		commandLine "echo", "Starting docker containers"
	}

	task dockerStop(type: Exec) {
		doLast {
			exec {
				workingDir "${project.getRootDir()}/docker/local"
				commandLine "gradle", "stop"
			}
		}

		commandLine "echo", "Stopping docker containers"
	}


	task dockerUp(type: Exec) {
		doLast {
			exec {
				workingDir "${project.getRootDir()}/docker/local"
				commandLine "gradle", "up"
			}
		}

		commandLine "echo", "Bringing docker containers up"
	}
}

/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.www.marketing.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement;
import com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncementModel;
import com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncementSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MarketingEventAnnouncement service. Represents a row in the &quot;OSB_MarketingEventAnnouncement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MarketingEventAnnouncementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarketingEventAnnouncementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MarketingEventAnnouncementImpl
 * @see MarketingEventAnnouncement
 * @see MarketingEventAnnouncementModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MarketingEventAnnouncementModelImpl extends BaseModelImpl<MarketingEventAnnouncement>
	implements MarketingEventAnnouncementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marketing event announcement model instance should use the {@link MarketingEventAnnouncement} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_MarketingEventAnnouncement";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "marketingEventAnnouncementId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "marketingEventId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "summary", Types.VARCHAR },
			{ "imageFileEntryId", Types.BIGINT },
			{ "linkURL", Types.VARCHAR },
			{ "linkLabel", Types.VARCHAR },
			{ "displayDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("marketingEventAnnouncementId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketingEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("linkURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_MarketingEventAnnouncement (uuid_ VARCHAR(75) null,marketingEventAnnouncementId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,marketingEventId LONG,title STRING null,message STRING null,summary STRING null,imageFileEntryId LONG,linkURL VARCHAR(150) null,linkLabel VARCHAR(150) null,displayDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_MarketingEventAnnouncement";
	public static final String ORDER_BY_JPQL = " ORDER BY marketingEventAnnouncement.marketingEventAnnouncementId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_MarketingEventAnnouncement.marketingEventAnnouncementId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement"),
			true);
	public static final long DISPLAYDATE_COLUMN_BITMASK = 1L;
	public static final long MARKETINGEVENTID_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long MARKETINGEVENTANNOUNCEMENTID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarketingEventAnnouncement toModel(
		MarketingEventAnnouncementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarketingEventAnnouncement model = new MarketingEventAnnouncementImpl();

		model.setUuid(soapModel.getUuid());
		model.setMarketingEventAnnouncementId(soapModel.getMarketingEventAnnouncementId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMarketingEventId(soapModel.getMarketingEventId());
		model.setTitle(soapModel.getTitle());
		model.setMessage(soapModel.getMessage());
		model.setSummary(soapModel.getSummary());
		model.setImageFileEntryId(soapModel.getImageFileEntryId());
		model.setLinkURL(soapModel.getLinkURL());
		model.setLinkLabel(soapModel.getLinkLabel());
		model.setDisplayDate(soapModel.getDisplayDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarketingEventAnnouncement> toModels(
		MarketingEventAnnouncementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarketingEventAnnouncement> models = new ArrayList<MarketingEventAnnouncement>(soapModels.length);

		for (MarketingEventAnnouncementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement"));

	public MarketingEventAnnouncementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _marketingEventAnnouncementId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarketingEventAnnouncementId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _marketingEventAnnouncementId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarketingEventAnnouncement.class;
	}

	@Override
	public String getModelClassName() {
		return MarketingEventAnnouncement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("marketingEventAnnouncementId",
			getMarketingEventAnnouncementId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("marketingEventId", getMarketingEventId());
		attributes.put("title", getTitle());
		attributes.put("message", getMessage());
		attributes.put("summary", getSummary());
		attributes.put("imageFileEntryId", getImageFileEntryId());
		attributes.put("linkURL", getLinkURL());
		attributes.put("linkLabel", getLinkLabel());
		attributes.put("displayDate", getDisplayDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long marketingEventAnnouncementId = (Long)attributes.get(
				"marketingEventAnnouncementId");

		if (marketingEventAnnouncementId != null) {
			setMarketingEventAnnouncementId(marketingEventAnnouncementId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long marketingEventId = (Long)attributes.get("marketingEventId");

		if (marketingEventId != null) {
			setMarketingEventId(marketingEventId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		Long imageFileEntryId = (Long)attributes.get("imageFileEntryId");

		if (imageFileEntryId != null) {
			setImageFileEntryId(imageFileEntryId);
		}

		String linkURL = (String)attributes.get("linkURL");

		if (linkURL != null) {
			setLinkURL(linkURL);
		}

		String linkLabel = (String)attributes.get("linkLabel");

		if (linkLabel != null) {
			setLinkLabel(linkLabel);
		}

		Date displayDate = (Date)attributes.get("displayDate");

		if (displayDate != null) {
			setDisplayDate(displayDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMarketingEventAnnouncementId() {
		return _marketingEventAnnouncementId;
	}

	@Override
	public void setMarketingEventAnnouncementId(
		long marketingEventAnnouncementId) {
		_marketingEventAnnouncementId = marketingEventAnnouncementId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMarketingEventId() {
		return _marketingEventId;
	}

	@Override
	public void setMarketingEventId(long marketingEventId) {
		_columnBitmask |= MARKETINGEVENTID_COLUMN_BITMASK;

		if (!_setOriginalMarketingEventId) {
			_setOriginalMarketingEventId = true;

			_originalMarketingEventId = _marketingEventId;
		}

		_marketingEventId = marketingEventId;
	}

	public long getOriginalMarketingEventId() {
		return _originalMarketingEventId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@JSON
	@Override
	public long getImageFileEntryId() {
		return _imageFileEntryId;
	}

	@Override
	public void setImageFileEntryId(long imageFileEntryId) {
		_imageFileEntryId = imageFileEntryId;
	}

	@JSON
	@Override
	public String getLinkURL() {
		if (_linkURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkURL;
		}
	}

	@Override
	public void setLinkURL(String linkURL) {
		_linkURL = linkURL;
	}

	@JSON
	@Override
	public String getLinkLabel() {
		if (_linkLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkLabel;
		}
	}

	@Override
	public void setLinkLabel(String linkLabel) {
		_linkLabel = linkLabel;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_columnBitmask |= DISPLAYDATE_COLUMN_BITMASK;

		if (_originalDisplayDate == null) {
			_originalDisplayDate = _displayDate;
		}

		_displayDate = displayDate;
	}

	public Date getOriginalDisplayDate() {
		return _originalDisplayDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MarketingEventAnnouncement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MarketingEventAnnouncement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarketingEventAnnouncement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarketingEventAnnouncementImpl marketingEventAnnouncementImpl = new MarketingEventAnnouncementImpl();

		marketingEventAnnouncementImpl.setUuid(getUuid());
		marketingEventAnnouncementImpl.setMarketingEventAnnouncementId(getMarketingEventAnnouncementId());
		marketingEventAnnouncementImpl.setUserId(getUserId());
		marketingEventAnnouncementImpl.setUserName(getUserName());
		marketingEventAnnouncementImpl.setCreateDate(getCreateDate());
		marketingEventAnnouncementImpl.setModifiedDate(getModifiedDate());
		marketingEventAnnouncementImpl.setMarketingEventId(getMarketingEventId());
		marketingEventAnnouncementImpl.setTitle(getTitle());
		marketingEventAnnouncementImpl.setMessage(getMessage());
		marketingEventAnnouncementImpl.setSummary(getSummary());
		marketingEventAnnouncementImpl.setImageFileEntryId(getImageFileEntryId());
		marketingEventAnnouncementImpl.setLinkURL(getLinkURL());
		marketingEventAnnouncementImpl.setLinkLabel(getLinkLabel());
		marketingEventAnnouncementImpl.setDisplayDate(getDisplayDate());
		marketingEventAnnouncementImpl.setStatus(getStatus());
		marketingEventAnnouncementImpl.setStatusByUserId(getStatusByUserId());
		marketingEventAnnouncementImpl.setStatusByUserName(getStatusByUserName());
		marketingEventAnnouncementImpl.setStatusDate(getStatusDate());

		marketingEventAnnouncementImpl.resetOriginalValues();

		return marketingEventAnnouncementImpl;
	}

	@Override
	public int compareTo(MarketingEventAnnouncement marketingEventAnnouncement) {
		long primaryKey = marketingEventAnnouncement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarketingEventAnnouncement)) {
			return false;
		}

		MarketingEventAnnouncement marketingEventAnnouncement = (MarketingEventAnnouncement)obj;

		long primaryKey = marketingEventAnnouncement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MarketingEventAnnouncementModelImpl marketingEventAnnouncementModelImpl = this;

		marketingEventAnnouncementModelImpl._originalUuid = marketingEventAnnouncementModelImpl._uuid;

		marketingEventAnnouncementModelImpl._setModifiedDate = false;

		marketingEventAnnouncementModelImpl._originalMarketingEventId = marketingEventAnnouncementModelImpl._marketingEventId;

		marketingEventAnnouncementModelImpl._setOriginalMarketingEventId = false;

		marketingEventAnnouncementModelImpl._originalDisplayDate = marketingEventAnnouncementModelImpl._displayDate;

		marketingEventAnnouncementModelImpl._originalStatus = marketingEventAnnouncementModelImpl._status;

		marketingEventAnnouncementModelImpl._setOriginalStatus = false;

		marketingEventAnnouncementModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarketingEventAnnouncement> toCacheModel() {
		MarketingEventAnnouncementCacheModel marketingEventAnnouncementCacheModel =
			new MarketingEventAnnouncementCacheModel();

		marketingEventAnnouncementCacheModel.uuid = getUuid();

		String uuid = marketingEventAnnouncementCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			marketingEventAnnouncementCacheModel.uuid = null;
		}

		marketingEventAnnouncementCacheModel.marketingEventAnnouncementId = getMarketingEventAnnouncementId();

		marketingEventAnnouncementCacheModel.userId = getUserId();

		marketingEventAnnouncementCacheModel.userName = getUserName();

		String userName = marketingEventAnnouncementCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			marketingEventAnnouncementCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			marketingEventAnnouncementCacheModel.createDate = createDate.getTime();
		}
		else {
			marketingEventAnnouncementCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			marketingEventAnnouncementCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			marketingEventAnnouncementCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		marketingEventAnnouncementCacheModel.marketingEventId = getMarketingEventId();

		marketingEventAnnouncementCacheModel.title = getTitle();

		String title = marketingEventAnnouncementCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			marketingEventAnnouncementCacheModel.title = null;
		}

		marketingEventAnnouncementCacheModel.message = getMessage();

		String message = marketingEventAnnouncementCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			marketingEventAnnouncementCacheModel.message = null;
		}

		marketingEventAnnouncementCacheModel.summary = getSummary();

		String summary = marketingEventAnnouncementCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			marketingEventAnnouncementCacheModel.summary = null;
		}

		marketingEventAnnouncementCacheModel.imageFileEntryId = getImageFileEntryId();

		marketingEventAnnouncementCacheModel.linkURL = getLinkURL();

		String linkURL = marketingEventAnnouncementCacheModel.linkURL;

		if ((linkURL != null) && (linkURL.length() == 0)) {
			marketingEventAnnouncementCacheModel.linkURL = null;
		}

		marketingEventAnnouncementCacheModel.linkLabel = getLinkLabel();

		String linkLabel = marketingEventAnnouncementCacheModel.linkLabel;

		if ((linkLabel != null) && (linkLabel.length() == 0)) {
			marketingEventAnnouncementCacheModel.linkLabel = null;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			marketingEventAnnouncementCacheModel.displayDate = displayDate.getTime();
		}
		else {
			marketingEventAnnouncementCacheModel.displayDate = Long.MIN_VALUE;
		}

		marketingEventAnnouncementCacheModel.status = getStatus();

		marketingEventAnnouncementCacheModel.statusByUserId = getStatusByUserId();

		marketingEventAnnouncementCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = marketingEventAnnouncementCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			marketingEventAnnouncementCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			marketingEventAnnouncementCacheModel.statusDate = statusDate.getTime();
		}
		else {
			marketingEventAnnouncementCacheModel.statusDate = Long.MIN_VALUE;
		}

		return marketingEventAnnouncementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", marketingEventAnnouncementId=");
		sb.append(getMarketingEventAnnouncementId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", marketingEventId=");
		sb.append(getMarketingEventId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", imageFileEntryId=");
		sb.append(getImageFileEntryId());
		sb.append(", linkURL=");
		sb.append(getLinkURL());
		sb.append(", linkLabel=");
		sb.append(getLinkLabel());
		sb.append(", displayDate=");
		sb.append(getDisplayDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.osb.www.marketing.events.model.MarketingEventAnnouncement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventAnnouncementId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventAnnouncementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkURL</column-name><column-value><![CDATA[");
		sb.append(getLinkURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkLabel</column-name><column-value><![CDATA[");
		sb.append(getLinkLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayDate</column-name><column-value><![CDATA[");
		sb.append(getDisplayDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MarketingEventAnnouncement.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MarketingEventAnnouncement.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _marketingEventAnnouncementId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _marketingEventId;
	private long _originalMarketingEventId;
	private boolean _setOriginalMarketingEventId;
	private String _title;
	private String _message;
	private String _summary;
	private long _imageFileEntryId;
	private String _linkURL;
	private String _linkLabel;
	private Date _displayDate;
	private Date _originalDisplayDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private MarketingEventAnnouncement _escapedModel;
}
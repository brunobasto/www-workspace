/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.www.marketing.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.www.marketing.events.model.MarketingEvent;
import com.liferay.osb.www.marketing.events.model.MarketingEventModel;
import com.liferay.osb.www.marketing.events.model.MarketingEventSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the MarketingEvent service. Represents a row in the &quot;OSB_MarketingEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MarketingEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarketingEventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MarketingEventImpl
 * @see MarketingEvent
 * @see MarketingEventModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MarketingEventModelImpl extends BaseModelImpl<MarketingEvent>
	implements MarketingEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marketing event model instance should use the {@link MarketingEvent} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_MarketingEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "marketingEventId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "type_", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "titleURL", Types.VARCHAR },
			{ "hostedBy", Types.VARCHAR },
			{ "hostedByURL", Types.VARCHAR },
			{ "summary", Types.VARCHAR },
			{ "siteGroupId", Types.BIGINT },
			{ "imageFileEntryId", Types.BIGINT },
			{ "slidesFileEntryId", Types.BIGINT },
			{ "videoTitle", Types.VARCHAR },
			{ "timeZoneId", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "dateTBA", Types.BOOLEAN },
			{ "addressId", Types.BIGINT },
			{ "latitude", Types.DOUBLE },
			{ "longitude", Types.DOUBLE },
			{ "globalRegion", Types.INTEGER },
			{ "online_", Types.BOOLEAN },
			{ "registrationType", Types.INTEGER },
			{ "registrationURL", Types.VARCHAR },
			{ "extraSettings", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("marketingEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titleURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostedByURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("slidesFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timeZoneId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateTBA", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("latitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("longitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("globalRegion", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("online_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("registrationType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("registrationURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extraSettings", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_MarketingEvent (marketingEventId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,type_ INTEGER,title STRING null,titleURL VARCHAR(1000) null,hostedBy VARCHAR(75) null,hostedByURL VARCHAR(1000) null,summary STRING null,siteGroupId LONG,imageFileEntryId LONG,slidesFileEntryId LONG,videoTitle VARCHAR(150) null,timeZoneId VARCHAR(75) null,startDate DATE null,endDate DATE null,dateTBA BOOLEAN,addressId LONG,latitude DOUBLE,longitude DOUBLE,globalRegion INTEGER,online_ BOOLEAN,registrationType INTEGER,registrationURL STRING null,extraSettings VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_MarketingEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY marketingEvent.marketingEventId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_MarketingEvent.marketingEventId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.www.marketing.events.model.MarketingEvent"),
			true);
	public static final long GLOBALREGION_COLUMN_BITMASK = 1L;
	public static final long SITEGROUPID_COLUMN_BITMASK = 2L;
	public static final long STARTDATE_COLUMN_BITMASK = 4L;
	public static final long TYPE_COLUMN_BITMASK = 8L;
	public static final long MARKETINGEVENTID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarketingEvent toModel(MarketingEventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarketingEvent model = new MarketingEventImpl();

		model.setMarketingEventId(soapModel.getMarketingEventId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setType(soapModel.getType());
		model.setTitle(soapModel.getTitle());
		model.setTitleURL(soapModel.getTitleURL());
		model.setHostedBy(soapModel.getHostedBy());
		model.setHostedByURL(soapModel.getHostedByURL());
		model.setSummary(soapModel.getSummary());
		model.setSiteGroupId(soapModel.getSiteGroupId());
		model.setImageFileEntryId(soapModel.getImageFileEntryId());
		model.setSlidesFileEntryId(soapModel.getSlidesFileEntryId());
		model.setVideoTitle(soapModel.getVideoTitle());
		model.setTimeZoneId(soapModel.getTimeZoneId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDateTBA(soapModel.getDateTBA());
		model.setAddressId(soapModel.getAddressId());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setGlobalRegion(soapModel.getGlobalRegion());
		model.setOnline(soapModel.getOnline());
		model.setRegistrationType(soapModel.getRegistrationType());
		model.setRegistrationURL(soapModel.getRegistrationURL());
		model.setExtraSettings(soapModel.getExtraSettings());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarketingEvent> toModels(MarketingEventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarketingEvent> models = new ArrayList<MarketingEvent>(soapModels.length);

		for (MarketingEventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.www.marketing.events.model.MarketingEvent"));

	public MarketingEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _marketingEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarketingEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _marketingEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarketingEvent.class;
	}

	@Override
	public String getModelClassName() {
		return MarketingEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("marketingEventId", getMarketingEventId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("type", getType());
		attributes.put("title", getTitle());
		attributes.put("titleURL", getTitleURL());
		attributes.put("hostedBy", getHostedBy());
		attributes.put("hostedByURL", getHostedByURL());
		attributes.put("summary", getSummary());
		attributes.put("siteGroupId", getSiteGroupId());
		attributes.put("imageFileEntryId", getImageFileEntryId());
		attributes.put("slidesFileEntryId", getSlidesFileEntryId());
		attributes.put("videoTitle", getVideoTitle());
		attributes.put("timeZoneId", getTimeZoneId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("dateTBA", getDateTBA());
		attributes.put("addressId", getAddressId());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("globalRegion", getGlobalRegion());
		attributes.put("online", getOnline());
		attributes.put("registrationType", getRegistrationType());
		attributes.put("registrationURL", getRegistrationURL());
		attributes.put("extraSettings", getExtraSettings());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long marketingEventId = (Long)attributes.get("marketingEventId");

		if (marketingEventId != null) {
			setMarketingEventId(marketingEventId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String titleURL = (String)attributes.get("titleURL");

		if (titleURL != null) {
			setTitleURL(titleURL);
		}

		String hostedBy = (String)attributes.get("hostedBy");

		if (hostedBy != null) {
			setHostedBy(hostedBy);
		}

		String hostedByURL = (String)attributes.get("hostedByURL");

		if (hostedByURL != null) {
			setHostedByURL(hostedByURL);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		Long siteGroupId = (Long)attributes.get("siteGroupId");

		if (siteGroupId != null) {
			setSiteGroupId(siteGroupId);
		}

		Long imageFileEntryId = (Long)attributes.get("imageFileEntryId");

		if (imageFileEntryId != null) {
			setImageFileEntryId(imageFileEntryId);
		}

		Long slidesFileEntryId = (Long)attributes.get("slidesFileEntryId");

		if (slidesFileEntryId != null) {
			setSlidesFileEntryId(slidesFileEntryId);
		}

		String videoTitle = (String)attributes.get("videoTitle");

		if (videoTitle != null) {
			setVideoTitle(videoTitle);
		}

		String timeZoneId = (String)attributes.get("timeZoneId");

		if (timeZoneId != null) {
			setTimeZoneId(timeZoneId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Boolean dateTBA = (Boolean)attributes.get("dateTBA");

		if (dateTBA != null) {
			setDateTBA(dateTBA);
		}

		Long addressId = (Long)attributes.get("addressId");

		if (addressId != null) {
			setAddressId(addressId);
		}

		Double latitude = (Double)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		Double longitude = (Double)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		Integer globalRegion = (Integer)attributes.get("globalRegion");

		if (globalRegion != null) {
			setGlobalRegion(globalRegion);
		}

		Boolean online = (Boolean)attributes.get("online");

		if (online != null) {
			setOnline(online);
		}

		Integer registrationType = (Integer)attributes.get("registrationType");

		if (registrationType != null) {
			setRegistrationType(registrationType);
		}

		String registrationURL = (String)attributes.get("registrationURL");

		if (registrationURL != null) {
			setRegistrationURL(registrationURL);
		}

		String extraSettings = (String)attributes.get("extraSettings");

		if (extraSettings != null) {
			setExtraSettings(extraSettings);
		}
	}

	@JSON
	@Override
	public long getMarketingEventId() {
		return _marketingEventId;
	}

	@Override
	public void setMarketingEventId(long marketingEventId) {
		_marketingEventId = marketingEventId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTitleURL() {
		if (_titleURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleURL;
		}
	}

	@Override
	public void setTitleURL(String titleURL) {
		_titleURL = titleURL;
	}

	@JSON
	@Override
	public String getHostedBy() {
		if (_hostedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _hostedBy;
		}
	}

	@Override
	public void setHostedBy(String hostedBy) {
		_hostedBy = hostedBy;
	}

	@JSON
	@Override
	public String getHostedByURL() {
		if (_hostedByURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _hostedByURL;
		}
	}

	@Override
	public void setHostedByURL(String hostedByURL) {
		_hostedByURL = hostedByURL;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	@Override
	public String getSummary(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSummary(languageId);
	}

	@Override
	public String getSummary(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSummary(languageId, useDefault);
	}

	@Override
	public String getSummary(String languageId) {
		return LocalizationUtil.getLocalization(getSummary(), languageId);
	}

	@Override
	public String getSummary(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSummary(), languageId,
			useDefault);
	}

	@Override
	public String getSummaryCurrentLanguageId() {
		return _summaryCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSummaryCurrentValue() {
		Locale locale = getLocale(_summaryCurrentLanguageId);

		return getSummary(locale);
	}

	@Override
	public Map<Locale, String> getSummaryMap() {
		return LocalizationUtil.getLocalizationMap(getSummary());
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@Override
	public void setSummary(String summary, Locale locale) {
		setSummary(summary, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSummary(String summary, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(summary)) {
			setSummary(LocalizationUtil.updateLocalization(getSummary(),
					"Summary", summary, languageId, defaultLanguageId));
		}
		else {
			setSummary(LocalizationUtil.removeLocalization(getSummary(),
					"Summary", languageId));
		}
	}

	@Override
	public void setSummaryCurrentLanguageId(String languageId) {
		_summaryCurrentLanguageId = languageId;
	}

	@Override
	public void setSummaryMap(Map<Locale, String> summaryMap) {
		setSummaryMap(summaryMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSummaryMap(Map<Locale, String> summaryMap,
		Locale defaultLocale) {
		if (summaryMap == null) {
			return;
		}

		setSummary(LocalizationUtil.updateLocalization(summaryMap,
				getSummary(), "Summary", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getSiteGroupId() {
		return _siteGroupId;
	}

	@Override
	public void setSiteGroupId(long siteGroupId) {
		_columnBitmask |= SITEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalSiteGroupId) {
			_setOriginalSiteGroupId = true;

			_originalSiteGroupId = _siteGroupId;
		}

		_siteGroupId = siteGroupId;
	}

	public long getOriginalSiteGroupId() {
		return _originalSiteGroupId;
	}

	@JSON
	@Override
	public long getImageFileEntryId() {
		return _imageFileEntryId;
	}

	@Override
	public void setImageFileEntryId(long imageFileEntryId) {
		_imageFileEntryId = imageFileEntryId;
	}

	@JSON
	@Override
	public long getSlidesFileEntryId() {
		return _slidesFileEntryId;
	}

	@Override
	public void setSlidesFileEntryId(long slidesFileEntryId) {
		_slidesFileEntryId = slidesFileEntryId;
	}

	@JSON
	@Override
	public String getVideoTitle() {
		if (_videoTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _videoTitle;
		}
	}

	@Override
	public void setVideoTitle(String videoTitle) {
		_videoTitle = videoTitle;
	}

	@JSON
	@Override
	public String getTimeZoneId() {
		if (_timeZoneId == null) {
			return StringPool.BLANK;
		}
		else {
			return _timeZoneId;
		}
	}

	@Override
	public void setTimeZoneId(String timeZoneId) {
		_timeZoneId = timeZoneId;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask |= STARTDATE_COLUMN_BITMASK;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public boolean getDateTBA() {
		return _dateTBA;
	}

	@JSON
	@Override
	public boolean isDateTBA() {
		return _dateTBA;
	}

	@Override
	public void setDateTBA(boolean dateTBA) {
		_dateTBA = dateTBA;
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		_addressId = addressId;
	}

	@JSON
	@Override
	public double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(double latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(double longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public int getGlobalRegion() {
		return _globalRegion;
	}

	@Override
	public void setGlobalRegion(int globalRegion) {
		_columnBitmask |= GLOBALREGION_COLUMN_BITMASK;

		if (!_setOriginalGlobalRegion) {
			_setOriginalGlobalRegion = true;

			_originalGlobalRegion = _globalRegion;
		}

		_globalRegion = globalRegion;
	}

	public int getOriginalGlobalRegion() {
		return _originalGlobalRegion;
	}

	@JSON
	@Override
	public boolean getOnline() {
		return _online;
	}

	@JSON
	@Override
	public boolean isOnline() {
		return _online;
	}

	@Override
	public void setOnline(boolean online) {
		_online = online;
	}

	@JSON
	@Override
	public int getRegistrationType() {
		return _registrationType;
	}

	@Override
	public void setRegistrationType(int registrationType) {
		_registrationType = registrationType;
	}

	@JSON
	@Override
	public String getRegistrationURL() {
		if (_registrationURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationURL;
		}
	}

	@Override
	public void setRegistrationURL(String registrationURL) {
		_registrationURL = registrationURL;
	}

	@JSON
	@Override
	public String getExtraSettings() {
		if (_extraSettings == null) {
			return StringPool.BLANK;
		}
		else {
			return _extraSettings;
		}
	}

	@Override
	public void setExtraSettings(String extraSettings) {
		_extraSettings = extraSettings;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MarketingEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> summaryMap = getSummaryMap();

		for (Map.Entry<Locale, String> entry : summaryMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(MarketingEvent.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String summary = getSummary(defaultLocale);

		if (Validator.isNull(summary)) {
			setSummary(getSummary(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSummary(getSummary(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public MarketingEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarketingEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarketingEventImpl marketingEventImpl = new MarketingEventImpl();

		marketingEventImpl.setMarketingEventId(getMarketingEventId());
		marketingEventImpl.setCompanyId(getCompanyId());
		marketingEventImpl.setUserId(getUserId());
		marketingEventImpl.setUserName(getUserName());
		marketingEventImpl.setCreateDate(getCreateDate());
		marketingEventImpl.setModifiedDate(getModifiedDate());
		marketingEventImpl.setType(getType());
		marketingEventImpl.setTitle(getTitle());
		marketingEventImpl.setTitleURL(getTitleURL());
		marketingEventImpl.setHostedBy(getHostedBy());
		marketingEventImpl.setHostedByURL(getHostedByURL());
		marketingEventImpl.setSummary(getSummary());
		marketingEventImpl.setSiteGroupId(getSiteGroupId());
		marketingEventImpl.setImageFileEntryId(getImageFileEntryId());
		marketingEventImpl.setSlidesFileEntryId(getSlidesFileEntryId());
		marketingEventImpl.setVideoTitle(getVideoTitle());
		marketingEventImpl.setTimeZoneId(getTimeZoneId());
		marketingEventImpl.setStartDate(getStartDate());
		marketingEventImpl.setEndDate(getEndDate());
		marketingEventImpl.setDateTBA(getDateTBA());
		marketingEventImpl.setAddressId(getAddressId());
		marketingEventImpl.setLatitude(getLatitude());
		marketingEventImpl.setLongitude(getLongitude());
		marketingEventImpl.setGlobalRegion(getGlobalRegion());
		marketingEventImpl.setOnline(getOnline());
		marketingEventImpl.setRegistrationType(getRegistrationType());
		marketingEventImpl.setRegistrationURL(getRegistrationURL());
		marketingEventImpl.setExtraSettings(getExtraSettings());

		marketingEventImpl.resetOriginalValues();

		return marketingEventImpl;
	}

	@Override
	public int compareTo(MarketingEvent marketingEvent) {
		long primaryKey = marketingEvent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarketingEvent)) {
			return false;
		}

		MarketingEvent marketingEvent = (MarketingEvent)obj;

		long primaryKey = marketingEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MarketingEventModelImpl marketingEventModelImpl = this;

		marketingEventModelImpl._setModifiedDate = false;

		marketingEventModelImpl._originalType = marketingEventModelImpl._type;

		marketingEventModelImpl._setOriginalType = false;

		marketingEventModelImpl._originalSiteGroupId = marketingEventModelImpl._siteGroupId;

		marketingEventModelImpl._setOriginalSiteGroupId = false;

		marketingEventModelImpl._originalStartDate = marketingEventModelImpl._startDate;

		marketingEventModelImpl._originalGlobalRegion = marketingEventModelImpl._globalRegion;

		marketingEventModelImpl._setOriginalGlobalRegion = false;

		marketingEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarketingEvent> toCacheModel() {
		MarketingEventCacheModel marketingEventCacheModel = new MarketingEventCacheModel();

		marketingEventCacheModel.marketingEventId = getMarketingEventId();

		marketingEventCacheModel.companyId = getCompanyId();

		marketingEventCacheModel.userId = getUserId();

		marketingEventCacheModel.userName = getUserName();

		String userName = marketingEventCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			marketingEventCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			marketingEventCacheModel.createDate = createDate.getTime();
		}
		else {
			marketingEventCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			marketingEventCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			marketingEventCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		marketingEventCacheModel.type = getType();

		marketingEventCacheModel.title = getTitle();

		String title = marketingEventCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			marketingEventCacheModel.title = null;
		}

		marketingEventCacheModel.titleURL = getTitleURL();

		String titleURL = marketingEventCacheModel.titleURL;

		if ((titleURL != null) && (titleURL.length() == 0)) {
			marketingEventCacheModel.titleURL = null;
		}

		marketingEventCacheModel.hostedBy = getHostedBy();

		String hostedBy = marketingEventCacheModel.hostedBy;

		if ((hostedBy != null) && (hostedBy.length() == 0)) {
			marketingEventCacheModel.hostedBy = null;
		}

		marketingEventCacheModel.hostedByURL = getHostedByURL();

		String hostedByURL = marketingEventCacheModel.hostedByURL;

		if ((hostedByURL != null) && (hostedByURL.length() == 0)) {
			marketingEventCacheModel.hostedByURL = null;
		}

		marketingEventCacheModel.summary = getSummary();

		String summary = marketingEventCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			marketingEventCacheModel.summary = null;
		}

		marketingEventCacheModel.siteGroupId = getSiteGroupId();

		marketingEventCacheModel.imageFileEntryId = getImageFileEntryId();

		marketingEventCacheModel.slidesFileEntryId = getSlidesFileEntryId();

		marketingEventCacheModel.videoTitle = getVideoTitle();

		String videoTitle = marketingEventCacheModel.videoTitle;

		if ((videoTitle != null) && (videoTitle.length() == 0)) {
			marketingEventCacheModel.videoTitle = null;
		}

		marketingEventCacheModel.timeZoneId = getTimeZoneId();

		String timeZoneId = marketingEventCacheModel.timeZoneId;

		if ((timeZoneId != null) && (timeZoneId.length() == 0)) {
			marketingEventCacheModel.timeZoneId = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			marketingEventCacheModel.startDate = startDate.getTime();
		}
		else {
			marketingEventCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			marketingEventCacheModel.endDate = endDate.getTime();
		}
		else {
			marketingEventCacheModel.endDate = Long.MIN_VALUE;
		}

		marketingEventCacheModel.dateTBA = getDateTBA();

		marketingEventCacheModel.addressId = getAddressId();

		marketingEventCacheModel.latitude = getLatitude();

		marketingEventCacheModel.longitude = getLongitude();

		marketingEventCacheModel.globalRegion = getGlobalRegion();

		marketingEventCacheModel.online = getOnline();

		marketingEventCacheModel.registrationType = getRegistrationType();

		marketingEventCacheModel.registrationURL = getRegistrationURL();

		String registrationURL = marketingEventCacheModel.registrationURL;

		if ((registrationURL != null) && (registrationURL.length() == 0)) {
			marketingEventCacheModel.registrationURL = null;
		}

		marketingEventCacheModel.extraSettings = getExtraSettings();

		String extraSettings = marketingEventCacheModel.extraSettings;

		if ((extraSettings != null) && (extraSettings.length() == 0)) {
			marketingEventCacheModel.extraSettings = null;
		}

		return marketingEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{marketingEventId=");
		sb.append(getMarketingEventId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", titleURL=");
		sb.append(getTitleURL());
		sb.append(", hostedBy=");
		sb.append(getHostedBy());
		sb.append(", hostedByURL=");
		sb.append(getHostedByURL());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", siteGroupId=");
		sb.append(getSiteGroupId());
		sb.append(", imageFileEntryId=");
		sb.append(getImageFileEntryId());
		sb.append(", slidesFileEntryId=");
		sb.append(getSlidesFileEntryId());
		sb.append(", videoTitle=");
		sb.append(getVideoTitle());
		sb.append(", timeZoneId=");
		sb.append(getTimeZoneId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", dateTBA=");
		sb.append(getDateTBA());
		sb.append(", addressId=");
		sb.append(getAddressId());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", globalRegion=");
		sb.append(getGlobalRegion());
		sb.append(", online=");
		sb.append(getOnline());
		sb.append(", registrationType=");
		sb.append(getRegistrationType());
		sb.append(", registrationURL=");
		sb.append(getRegistrationURL());
		sb.append(", extraSettings=");
		sb.append(getExtraSettings());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.www.marketing.events.model.MarketingEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>marketingEventId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleURL</column-name><column-value><![CDATA[");
		sb.append(getTitleURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostedBy</column-name><column-value><![CDATA[");
		sb.append(getHostedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostedByURL</column-name><column-value><![CDATA[");
		sb.append(getHostedByURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteGroupId</column-name><column-value><![CDATA[");
		sb.append(getSiteGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>slidesFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getSlidesFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoTitle</column-name><column-value><![CDATA[");
		sb.append(getVideoTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeZoneId</column-name><column-value><![CDATA[");
		sb.append(getTimeZoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateTBA</column-name><column-value><![CDATA[");
		sb.append(getDateTBA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressId</column-name><column-value><![CDATA[");
		sb.append(getAddressId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>globalRegion</column-name><column-value><![CDATA[");
		sb.append(getGlobalRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>online</column-name><column-value><![CDATA[");
		sb.append(getOnline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationType</column-name><column-value><![CDATA[");
		sb.append(getRegistrationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationURL</column-name><column-value><![CDATA[");
		sb.append(getRegistrationURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extraSettings</column-name><column-value><![CDATA[");
		sb.append(getExtraSettings());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MarketingEvent.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MarketingEvent.class
		};
	private long _marketingEventId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _titleURL;
	private String _hostedBy;
	private String _hostedByURL;
	private String _summary;
	private String _summaryCurrentLanguageId;
	private long _siteGroupId;
	private long _originalSiteGroupId;
	private boolean _setOriginalSiteGroupId;
	private long _imageFileEntryId;
	private long _slidesFileEntryId;
	private String _videoTitle;
	private String _timeZoneId;
	private Date _startDate;
	private Date _originalStartDate;
	private Date _endDate;
	private boolean _dateTBA;
	private long _addressId;
	private double _latitude;
	private double _longitude;
	private int _globalRegion;
	private int _originalGlobalRegion;
	private boolean _setOriginalGlobalRegion;
	private boolean _online;
	private int _registrationType;
	private String _registrationURL;
	private String _extraSettings;
	private long _columnBitmask;
	private MarketingEvent _escapedModel;
}
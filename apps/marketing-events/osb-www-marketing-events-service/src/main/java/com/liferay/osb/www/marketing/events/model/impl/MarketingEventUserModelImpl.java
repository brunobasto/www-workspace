/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.www.marketing.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.osb.www.marketing.events.model.MarketingEventUser;
import com.liferay.osb.www.marketing.events.model.MarketingEventUserModel;
import com.liferay.osb.www.marketing.events.model.MarketingEventUserSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the MarketingEventUser service. Represents a row in the &quot;OSB_MarketingEventUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MarketingEventUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarketingEventUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MarketingEventUserImpl
 * @see MarketingEventUser
 * @see MarketingEventUserModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MarketingEventUserModelImpl extends BaseModelImpl<MarketingEventUser>
	implements MarketingEventUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marketing event user model instance should use the {@link MarketingEventUser} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_MarketingEventUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "marketingEventUserId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "marketingEventId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "companyName", Types.VARCHAR },
			{ "companyLogoFileEntryId", Types.BIGINT },
			{ "jobTitle", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "imageFileEntryId", Types.BIGINT },
			{ "phoneNumber", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("marketingEventUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketingEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyLogoFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_MarketingEventUser (uuid_ VARCHAR(75) null,marketingEventUserId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,marketingEventId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null,companyName VARCHAR(75) null,companyLogoFileEntryId LONG,jobTitle STRING null,description STRING null,imageFileEntryId LONG,phoneNumber VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_MarketingEventUser";
	public static final String ORDER_BY_JPQL = " ORDER BY marketingEventUser.marketingEventUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_MarketingEventUser.marketingEventUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventUser"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long MARKETINGEVENTID_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long MARKETINGEVENTUSERID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarketingEventUser toModel(MarketingEventUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarketingEventUser model = new MarketingEventUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setMarketingEventUserId(soapModel.getMarketingEventUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMarketingEventId(soapModel.getMarketingEventId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setCompanyName(soapModel.getCompanyName());
		model.setCompanyLogoFileEntryId(soapModel.getCompanyLogoFileEntryId());
		model.setJobTitle(soapModel.getJobTitle());
		model.setDescription(soapModel.getDescription());
		model.setImageFileEntryId(soapModel.getImageFileEntryId());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarketingEventUser> toModels(
		MarketingEventUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarketingEventUser> models = new ArrayList<MarketingEventUser>(soapModels.length);

		for (MarketingEventUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_NAME =
		"OSB_MarketingEventSessions_MarketingEventUsers";
	public static final Object[][] MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "marketingEventSessionId", Types.BIGINT },
			{ "marketingEventUserId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_SQL_CREATE =
		"create table OSB_MarketingEventSessions_MarketingEventUsers (companyId LONG not null,marketingEventSessionId LONG not null,marketingEventUserId LONG not null,primary key (marketingEventSessionId, marketingEventUserId))";
	public static final boolean FINDER_CACHE_ENABLED_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS =
		GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.OSB_MarketingEventSessions_MarketingEventUsers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.www.marketing.events.model.MarketingEventUser"));

	public MarketingEventUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _marketingEventUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarketingEventUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _marketingEventUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarketingEventUser.class;
	}

	@Override
	public String getModelClassName() {
		return MarketingEventUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("marketingEventUserId", getMarketingEventUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("marketingEventId", getMarketingEventId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("companyName", getCompanyName());
		attributes.put("companyLogoFileEntryId", getCompanyLogoFileEntryId());
		attributes.put("jobTitle", getJobTitle());
		attributes.put("description", getDescription());
		attributes.put("imageFileEntryId", getImageFileEntryId());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long marketingEventUserId = (Long)attributes.get("marketingEventUserId");

		if (marketingEventUserId != null) {
			setMarketingEventUserId(marketingEventUserId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long marketingEventId = (Long)attributes.get("marketingEventId");

		if (marketingEventId != null) {
			setMarketingEventId(marketingEventId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		Long companyLogoFileEntryId = (Long)attributes.get(
				"companyLogoFileEntryId");

		if (companyLogoFileEntryId != null) {
			setCompanyLogoFileEntryId(companyLogoFileEntryId);
		}

		String jobTitle = (String)attributes.get("jobTitle");

		if (jobTitle != null) {
			setJobTitle(jobTitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long imageFileEntryId = (Long)attributes.get("imageFileEntryId");

		if (imageFileEntryId != null) {
			setImageFileEntryId(imageFileEntryId);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMarketingEventUserId() {
		return _marketingEventUserId;
	}

	@Override
	public void setMarketingEventUserId(long marketingEventUserId) {
		_marketingEventUserId = marketingEventUserId;
	}

	@Override
	public String getMarketingEventUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getMarketingEventUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setMarketingEventUserUuid(String marketingEventUserUuid) {
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMarketingEventId() {
		return _marketingEventId;
	}

	@Override
	public void setMarketingEventId(long marketingEventId) {
		_columnBitmask |= MARKETINGEVENTID_COLUMN_BITMASK;

		if (!_setOriginalMarketingEventId) {
			_setOriginalMarketingEventId = true;

			_originalMarketingEventId = _marketingEventId;
		}

		_marketingEventId = marketingEventId;
	}

	public long getOriginalMarketingEventId() {
		return _originalMarketingEventId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	@Override
	public long getCompanyLogoFileEntryId() {
		return _companyLogoFileEntryId;
	}

	@Override
	public void setCompanyLogoFileEntryId(long companyLogoFileEntryId) {
		_companyLogoFileEntryId = companyLogoFileEntryId;
	}

	@JSON
	@Override
	public String getJobTitle() {
		if (_jobTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobTitle;
		}
	}

	@Override
	public String getJobTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobTitle(languageId);
	}

	@Override
	public String getJobTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobTitle(languageId, useDefault);
	}

	@Override
	public String getJobTitle(String languageId) {
		return LocalizationUtil.getLocalization(getJobTitle(), languageId);
	}

	@Override
	public String getJobTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getJobTitle(), languageId,
			useDefault);
	}

	@Override
	public String getJobTitleCurrentLanguageId() {
		return _jobTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getJobTitleCurrentValue() {
		Locale locale = getLocale(_jobTitleCurrentLanguageId);

		return getJobTitle(locale);
	}

	@Override
	public Map<Locale, String> getJobTitleMap() {
		return LocalizationUtil.getLocalizationMap(getJobTitle());
	}

	@Override
	public void setJobTitle(String jobTitle) {
		_jobTitle = jobTitle;
	}

	@Override
	public void setJobTitle(String jobTitle, Locale locale) {
		setJobTitle(jobTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setJobTitle(String jobTitle, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(jobTitle)) {
			setJobTitle(LocalizationUtil.updateLocalization(getJobTitle(),
					"JobTitle", jobTitle, languageId, defaultLanguageId));
		}
		else {
			setJobTitle(LocalizationUtil.removeLocalization(getJobTitle(),
					"JobTitle", languageId));
		}
	}

	@Override
	public void setJobTitleCurrentLanguageId(String languageId) {
		_jobTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setJobTitleMap(Map<Locale, String> jobTitleMap) {
		setJobTitleMap(jobTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setJobTitleMap(Map<Locale, String> jobTitleMap,
		Locale defaultLocale) {
		if (jobTitleMap == null) {
			return;
		}

		setJobTitle(LocalizationUtil.updateLocalization(jobTitleMap,
				getJobTitle(), "JobTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getImageFileEntryId() {
		return _imageFileEntryId;
	}

	@Override
	public void setImageFileEntryId(long imageFileEntryId) {
		_imageFileEntryId = imageFileEntryId;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				MarketingEventUser.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MarketingEventUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> jobTitleMap = getJobTitleMap();

		for (Map.Entry<Locale, String> entry : jobTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getJobTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(MarketingEventUser.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String jobTitle = getJobTitle(defaultLocale);

		if (Validator.isNull(jobTitle)) {
			setJobTitle(getJobTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setJobTitle(getJobTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public MarketingEventUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarketingEventUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarketingEventUserImpl marketingEventUserImpl = new MarketingEventUserImpl();

		marketingEventUserImpl.setUuid(getUuid());
		marketingEventUserImpl.setMarketingEventUserId(getMarketingEventUserId());
		marketingEventUserImpl.setCompanyId(getCompanyId());
		marketingEventUserImpl.setUserId(getUserId());
		marketingEventUserImpl.setUserName(getUserName());
		marketingEventUserImpl.setCreateDate(getCreateDate());
		marketingEventUserImpl.setModifiedDate(getModifiedDate());
		marketingEventUserImpl.setMarketingEventId(getMarketingEventId());
		marketingEventUserImpl.setFirstName(getFirstName());
		marketingEventUserImpl.setLastName(getLastName());
		marketingEventUserImpl.setCompanyName(getCompanyName());
		marketingEventUserImpl.setCompanyLogoFileEntryId(getCompanyLogoFileEntryId());
		marketingEventUserImpl.setJobTitle(getJobTitle());
		marketingEventUserImpl.setDescription(getDescription());
		marketingEventUserImpl.setImageFileEntryId(getImageFileEntryId());
		marketingEventUserImpl.setPhoneNumber(getPhoneNumber());
		marketingEventUserImpl.setStatus(getStatus());
		marketingEventUserImpl.setStatusByUserId(getStatusByUserId());
		marketingEventUserImpl.setStatusByUserName(getStatusByUserName());
		marketingEventUserImpl.setStatusDate(getStatusDate());

		marketingEventUserImpl.resetOriginalValues();

		return marketingEventUserImpl;
	}

	@Override
	public int compareTo(MarketingEventUser marketingEventUser) {
		long primaryKey = marketingEventUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarketingEventUser)) {
			return false;
		}

		MarketingEventUser marketingEventUser = (MarketingEventUser)obj;

		long primaryKey = marketingEventUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MarketingEventUserModelImpl marketingEventUserModelImpl = this;

		marketingEventUserModelImpl._originalUuid = marketingEventUserModelImpl._uuid;

		marketingEventUserModelImpl._originalCompanyId = marketingEventUserModelImpl._companyId;

		marketingEventUserModelImpl._setOriginalCompanyId = false;

		marketingEventUserModelImpl._setModifiedDate = false;

		marketingEventUserModelImpl._originalMarketingEventId = marketingEventUserModelImpl._marketingEventId;

		marketingEventUserModelImpl._setOriginalMarketingEventId = false;

		marketingEventUserModelImpl._originalStatus = marketingEventUserModelImpl._status;

		marketingEventUserModelImpl._setOriginalStatus = false;

		marketingEventUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarketingEventUser> toCacheModel() {
		MarketingEventUserCacheModel marketingEventUserCacheModel = new MarketingEventUserCacheModel();

		marketingEventUserCacheModel.uuid = getUuid();

		String uuid = marketingEventUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			marketingEventUserCacheModel.uuid = null;
		}

		marketingEventUserCacheModel.marketingEventUserId = getMarketingEventUserId();

		marketingEventUserCacheModel.companyId = getCompanyId();

		marketingEventUserCacheModel.userId = getUserId();

		marketingEventUserCacheModel.userName = getUserName();

		String userName = marketingEventUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			marketingEventUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			marketingEventUserCacheModel.createDate = createDate.getTime();
		}
		else {
			marketingEventUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			marketingEventUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			marketingEventUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		marketingEventUserCacheModel.marketingEventId = getMarketingEventId();

		marketingEventUserCacheModel.firstName = getFirstName();

		String firstName = marketingEventUserCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			marketingEventUserCacheModel.firstName = null;
		}

		marketingEventUserCacheModel.lastName = getLastName();

		String lastName = marketingEventUserCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			marketingEventUserCacheModel.lastName = null;
		}

		marketingEventUserCacheModel.companyName = getCompanyName();

		String companyName = marketingEventUserCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			marketingEventUserCacheModel.companyName = null;
		}

		marketingEventUserCacheModel.companyLogoFileEntryId = getCompanyLogoFileEntryId();

		marketingEventUserCacheModel.jobTitle = getJobTitle();

		String jobTitle = marketingEventUserCacheModel.jobTitle;

		if ((jobTitle != null) && (jobTitle.length() == 0)) {
			marketingEventUserCacheModel.jobTitle = null;
		}

		marketingEventUserCacheModel.description = getDescription();

		String description = marketingEventUserCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			marketingEventUserCacheModel.description = null;
		}

		marketingEventUserCacheModel.imageFileEntryId = getImageFileEntryId();

		marketingEventUserCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = marketingEventUserCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			marketingEventUserCacheModel.phoneNumber = null;
		}

		marketingEventUserCacheModel.status = getStatus();

		marketingEventUserCacheModel.statusByUserId = getStatusByUserId();

		marketingEventUserCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = marketingEventUserCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			marketingEventUserCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			marketingEventUserCacheModel.statusDate = statusDate.getTime();
		}
		else {
			marketingEventUserCacheModel.statusDate = Long.MIN_VALUE;
		}

		return marketingEventUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", marketingEventUserId=");
		sb.append(getMarketingEventUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", marketingEventId=");
		sb.append(getMarketingEventId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", companyLogoFileEntryId=");
		sb.append(getCompanyLogoFileEntryId());
		sb.append(", jobTitle=");
		sb.append(getJobTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", imageFileEntryId=");
		sb.append(getImageFileEntryId());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.osb.www.marketing.events.model.MarketingEventUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventUserId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyLogoFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getCompanyLogoFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobTitle</column-name><column-value><![CDATA[");
		sb.append(getJobTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MarketingEventUser.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MarketingEventUser.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _marketingEventUserId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _marketingEventId;
	private long _originalMarketingEventId;
	private boolean _setOriginalMarketingEventId;
	private String _firstName;
	private String _lastName;
	private String _companyName;
	private long _companyLogoFileEntryId;
	private String _jobTitle;
	private String _jobTitleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _imageFileEntryId;
	private String _phoneNumber;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private MarketingEventUser _escapedModel;
}
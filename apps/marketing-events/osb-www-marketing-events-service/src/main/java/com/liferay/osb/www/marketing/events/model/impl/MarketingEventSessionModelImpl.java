/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.www.marketing.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.osb.www.marketing.events.model.MarketingEventSession;
import com.liferay.osb.www.marketing.events.model.MarketingEventSessionModel;
import com.liferay.osb.www.marketing.events.model.MarketingEventSessionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the MarketingEventSession service. Represents a row in the &quot;OSB_MarketingEventSession&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MarketingEventSessionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MarketingEventSessionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MarketingEventSessionImpl
 * @see MarketingEventSession
 * @see MarketingEventSessionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MarketingEventSessionModelImpl extends BaseModelImpl<MarketingEventSession>
	implements MarketingEventSessionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a marketing event session model instance should use the {@link MarketingEventSession} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_MarketingEventSession";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "marketingEventSessionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "marketingEventId", Types.BIGINT },
			{ "marketingEventSessionRoomId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "keywords", Types.VARCHAR },
			{ "slidesFileEntryId", Types.BIGINT },
			{ "videoURL", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("marketingEventSessionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketingEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("marketingEventSessionRoomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("slidesFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_MarketingEventSession (uuid_ VARCHAR(75) null,marketingEventSessionId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,marketingEventId LONG,marketingEventSessionRoomId LONG,title STRING null,description STRING null,keywords STRING null,slidesFileEntryId LONG,videoURL VARCHAR(150) null,startDate DATE null,endDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_MarketingEventSession";
	public static final String ORDER_BY_JPQL = " ORDER BY marketingEventSession.startDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_MarketingEventSession.startDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventSession"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventSession"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.www.marketing.events.model.MarketingEventSession"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long MARKETINGEVENTID_COLUMN_BITMASK = 2L;
	public static final long MARKETINGEVENTSESSIONROOMID_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long STARTDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MarketingEventSession toModel(
		MarketingEventSessionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MarketingEventSession model = new MarketingEventSessionImpl();

		model.setUuid(soapModel.getUuid());
		model.setMarketingEventSessionId(soapModel.getMarketingEventSessionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMarketingEventId(soapModel.getMarketingEventId());
		model.setMarketingEventSessionRoomId(soapModel.getMarketingEventSessionRoomId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setKeywords(soapModel.getKeywords());
		model.setSlidesFileEntryId(soapModel.getSlidesFileEntryId());
		model.setVideoURL(soapModel.getVideoURL());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MarketingEventSession> toModels(
		MarketingEventSessionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MarketingEventSession> models = new ArrayList<MarketingEventSession>(soapModels.length);

		for (MarketingEventSessionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_NAME =
		"OSB_MarketingEventSessions_MarketingEventUsers";
	public static final Object[][] MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "marketingEventSessionId", Types.BIGINT },
			{ "marketingEventUserId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS_SQL_CREATE =
		"create table OSB_MarketingEventSessions_MarketingEventUsers (companyId LONG not null,marketingEventSessionId LONG not null,marketingEventUserId LONG not null,primary key (marketingEventSessionId, marketingEventUserId))";
	public static final boolean FINDER_CACHE_ENABLED_OSB_MARKETINGEVENTSESSIONS_MARKETINGEVENTUSERS =
		GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.OSB_MarketingEventSessions_MarketingEventUsers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.www.marketing.events.model.MarketingEventSession"));

	public MarketingEventSessionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _marketingEventSessionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMarketingEventSessionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _marketingEventSessionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MarketingEventSession.class;
	}

	@Override
	public String getModelClassName() {
		return MarketingEventSession.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("marketingEventSessionId", getMarketingEventSessionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("marketingEventId", getMarketingEventId());
		attributes.put("marketingEventSessionRoomId",
			getMarketingEventSessionRoomId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("keywords", getKeywords());
		attributes.put("slidesFileEntryId", getSlidesFileEntryId());
		attributes.put("videoURL", getVideoURL());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long marketingEventSessionId = (Long)attributes.get(
				"marketingEventSessionId");

		if (marketingEventSessionId != null) {
			setMarketingEventSessionId(marketingEventSessionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long marketingEventId = (Long)attributes.get("marketingEventId");

		if (marketingEventId != null) {
			setMarketingEventId(marketingEventId);
		}

		Long marketingEventSessionRoomId = (Long)attributes.get(
				"marketingEventSessionRoomId");

		if (marketingEventSessionRoomId != null) {
			setMarketingEventSessionRoomId(marketingEventSessionRoomId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String keywords = (String)attributes.get("keywords");

		if (keywords != null) {
			setKeywords(keywords);
		}

		Long slidesFileEntryId = (Long)attributes.get("slidesFileEntryId");

		if (slidesFileEntryId != null) {
			setSlidesFileEntryId(slidesFileEntryId);
		}

		String videoURL = (String)attributes.get("videoURL");

		if (videoURL != null) {
			setVideoURL(videoURL);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMarketingEventSessionId() {
		return _marketingEventSessionId;
	}

	@Override
	public void setMarketingEventSessionId(long marketingEventSessionId) {
		_marketingEventSessionId = marketingEventSessionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMarketingEventId() {
		return _marketingEventId;
	}

	@Override
	public void setMarketingEventId(long marketingEventId) {
		_columnBitmask |= MARKETINGEVENTID_COLUMN_BITMASK;

		if (!_setOriginalMarketingEventId) {
			_setOriginalMarketingEventId = true;

			_originalMarketingEventId = _marketingEventId;
		}

		_marketingEventId = marketingEventId;
	}

	public long getOriginalMarketingEventId() {
		return _originalMarketingEventId;
	}

	@JSON
	@Override
	public long getMarketingEventSessionRoomId() {
		return _marketingEventSessionRoomId;
	}

	@Override
	public void setMarketingEventSessionRoomId(long marketingEventSessionRoomId) {
		_columnBitmask |= MARKETINGEVENTSESSIONROOMID_COLUMN_BITMASK;

		if (!_setOriginalMarketingEventSessionRoomId) {
			_setOriginalMarketingEventSessionRoomId = true;

			_originalMarketingEventSessionRoomId = _marketingEventSessionRoomId;
		}

		_marketingEventSessionRoomId = marketingEventSessionRoomId;
	}

	public long getOriginalMarketingEventSessionRoomId() {
		return _originalMarketingEventSessionRoomId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getKeywords() {
		if (_keywords == null) {
			return "";
		}
		else {
			return _keywords;
		}
	}

	@Override
	public String getKeywords(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getKeywords(languageId);
	}

	@Override
	public String getKeywords(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getKeywords(languageId, useDefault);
	}

	@Override
	public String getKeywords(String languageId) {
		return LocalizationUtil.getLocalization(getKeywords(), languageId);
	}

	@Override
	public String getKeywords(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getKeywords(), languageId,
			useDefault);
	}

	@Override
	public String getKeywordsCurrentLanguageId() {
		return _keywordsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getKeywordsCurrentValue() {
		Locale locale = getLocale(_keywordsCurrentLanguageId);

		return getKeywords(locale);
	}

	@Override
	public Map<Locale, String> getKeywordsMap() {
		return LocalizationUtil.getLocalizationMap(getKeywords());
	}

	@Override
	public void setKeywords(String keywords) {
		_keywords = keywords;
	}

	@Override
	public void setKeywords(String keywords, Locale locale) {
		setKeywords(keywords, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setKeywords(String keywords, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(keywords)) {
			setKeywords(LocalizationUtil.updateLocalization(getKeywords(),
					"Keywords", keywords, languageId, defaultLanguageId));
		}
		else {
			setKeywords(LocalizationUtil.removeLocalization(getKeywords(),
					"Keywords", languageId));
		}
	}

	@Override
	public void setKeywordsCurrentLanguageId(String languageId) {
		_keywordsCurrentLanguageId = languageId;
	}

	@Override
	public void setKeywordsMap(Map<Locale, String> keywordsMap) {
		setKeywordsMap(keywordsMap, LocaleUtil.getDefault());
	}

	@Override
	public void setKeywordsMap(Map<Locale, String> keywordsMap,
		Locale defaultLocale) {
		if (keywordsMap == null) {
			return;
		}

		setKeywords(LocalizationUtil.updateLocalization(keywordsMap,
				getKeywords(), "Keywords",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getSlidesFileEntryId() {
		return _slidesFileEntryId;
	}

	@Override
	public void setSlidesFileEntryId(long slidesFileEntryId) {
		_slidesFileEntryId = slidesFileEntryId;
	}

	@JSON
	@Override
	public String getVideoURL() {
		if (_videoURL == null) {
			return "";
		}
		else {
			return _videoURL;
		}
	}

	@Override
	public void setVideoURL(String videoURL) {
		_videoURL = videoURL;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				MarketingEventSession.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MarketingEventSession.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> keywordsMap = getKeywordsMap();

		for (Map.Entry<Locale, String> entry : keywordsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(MarketingEventSession.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String keywords = getKeywords(defaultLocale);

		if (Validator.isNull(keywords)) {
			setKeywords(getKeywords(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setKeywords(getKeywords(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public MarketingEventSession toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MarketingEventSession)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MarketingEventSessionImpl marketingEventSessionImpl = new MarketingEventSessionImpl();

		marketingEventSessionImpl.setUuid(getUuid());
		marketingEventSessionImpl.setMarketingEventSessionId(getMarketingEventSessionId());
		marketingEventSessionImpl.setCompanyId(getCompanyId());
		marketingEventSessionImpl.setUserId(getUserId());
		marketingEventSessionImpl.setUserName(getUserName());
		marketingEventSessionImpl.setCreateDate(getCreateDate());
		marketingEventSessionImpl.setModifiedDate(getModifiedDate());
		marketingEventSessionImpl.setMarketingEventId(getMarketingEventId());
		marketingEventSessionImpl.setMarketingEventSessionRoomId(getMarketingEventSessionRoomId());
		marketingEventSessionImpl.setTitle(getTitle());
		marketingEventSessionImpl.setDescription(getDescription());
		marketingEventSessionImpl.setKeywords(getKeywords());
		marketingEventSessionImpl.setSlidesFileEntryId(getSlidesFileEntryId());
		marketingEventSessionImpl.setVideoURL(getVideoURL());
		marketingEventSessionImpl.setStartDate(getStartDate());
		marketingEventSessionImpl.setEndDate(getEndDate());
		marketingEventSessionImpl.setStatus(getStatus());
		marketingEventSessionImpl.setStatusByUserId(getStatusByUserId());
		marketingEventSessionImpl.setStatusByUserName(getStatusByUserName());
		marketingEventSessionImpl.setStatusDate(getStatusDate());

		marketingEventSessionImpl.resetOriginalValues();

		return marketingEventSessionImpl;
	}

	@Override
	public int compareTo(MarketingEventSession marketingEventSession) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(),
				marketingEventSession.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MarketingEventSession)) {
			return false;
		}

		MarketingEventSession marketingEventSession = (MarketingEventSession)obj;

		long primaryKey = marketingEventSession.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MarketingEventSessionModelImpl marketingEventSessionModelImpl = this;

		marketingEventSessionModelImpl._originalUuid = marketingEventSessionModelImpl._uuid;

		marketingEventSessionModelImpl._originalCompanyId = marketingEventSessionModelImpl._companyId;

		marketingEventSessionModelImpl._setOriginalCompanyId = false;

		marketingEventSessionModelImpl._setModifiedDate = false;

		marketingEventSessionModelImpl._originalMarketingEventId = marketingEventSessionModelImpl._marketingEventId;

		marketingEventSessionModelImpl._setOriginalMarketingEventId = false;

		marketingEventSessionModelImpl._originalMarketingEventSessionRoomId = marketingEventSessionModelImpl._marketingEventSessionRoomId;

		marketingEventSessionModelImpl._setOriginalMarketingEventSessionRoomId = false;

		marketingEventSessionModelImpl._originalStatus = marketingEventSessionModelImpl._status;

		marketingEventSessionModelImpl._setOriginalStatus = false;

		marketingEventSessionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MarketingEventSession> toCacheModel() {
		MarketingEventSessionCacheModel marketingEventSessionCacheModel = new MarketingEventSessionCacheModel();

		marketingEventSessionCacheModel.uuid = getUuid();

		String uuid = marketingEventSessionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			marketingEventSessionCacheModel.uuid = null;
		}

		marketingEventSessionCacheModel.marketingEventSessionId = getMarketingEventSessionId();

		marketingEventSessionCacheModel.companyId = getCompanyId();

		marketingEventSessionCacheModel.userId = getUserId();

		marketingEventSessionCacheModel.userName = getUserName();

		String userName = marketingEventSessionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			marketingEventSessionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			marketingEventSessionCacheModel.createDate = createDate.getTime();
		}
		else {
			marketingEventSessionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			marketingEventSessionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			marketingEventSessionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		marketingEventSessionCacheModel.marketingEventId = getMarketingEventId();

		marketingEventSessionCacheModel.marketingEventSessionRoomId = getMarketingEventSessionRoomId();

		marketingEventSessionCacheModel.title = getTitle();

		String title = marketingEventSessionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			marketingEventSessionCacheModel.title = null;
		}

		marketingEventSessionCacheModel.description = getDescription();

		String description = marketingEventSessionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			marketingEventSessionCacheModel.description = null;
		}

		marketingEventSessionCacheModel.keywords = getKeywords();

		String keywords = marketingEventSessionCacheModel.keywords;

		if ((keywords != null) && (keywords.length() == 0)) {
			marketingEventSessionCacheModel.keywords = null;
		}

		marketingEventSessionCacheModel.slidesFileEntryId = getSlidesFileEntryId();

		marketingEventSessionCacheModel.videoURL = getVideoURL();

		String videoURL = marketingEventSessionCacheModel.videoURL;

		if ((videoURL != null) && (videoURL.length() == 0)) {
			marketingEventSessionCacheModel.videoURL = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			marketingEventSessionCacheModel.startDate = startDate.getTime();
		}
		else {
			marketingEventSessionCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			marketingEventSessionCacheModel.endDate = endDate.getTime();
		}
		else {
			marketingEventSessionCacheModel.endDate = Long.MIN_VALUE;
		}

		marketingEventSessionCacheModel.status = getStatus();

		marketingEventSessionCacheModel.statusByUserId = getStatusByUserId();

		marketingEventSessionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = marketingEventSessionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			marketingEventSessionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			marketingEventSessionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			marketingEventSessionCacheModel.statusDate = Long.MIN_VALUE;
		}

		return marketingEventSessionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", marketingEventSessionId=");
		sb.append(getMarketingEventSessionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", marketingEventId=");
		sb.append(getMarketingEventId());
		sb.append(", marketingEventSessionRoomId=");
		sb.append(getMarketingEventSessionRoomId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", keywords=");
		sb.append(getKeywords());
		sb.append(", slidesFileEntryId=");
		sb.append(getSlidesFileEntryId());
		sb.append(", videoURL=");
		sb.append(getVideoURL());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.osb.www.marketing.events.model.MarketingEventSession");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventSessionId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventSessionRoomId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventSessionRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keywords</column-name><column-value><![CDATA[");
		sb.append(getKeywords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>slidesFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getSlidesFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoURL</column-name><column-value><![CDATA[");
		sb.append(getVideoURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MarketingEventSession.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MarketingEventSession.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _marketingEventSessionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _marketingEventId;
	private long _originalMarketingEventId;
	private boolean _setOriginalMarketingEventId;
	private long _marketingEventSessionRoomId;
	private long _originalMarketingEventSessionRoomId;
	private boolean _setOriginalMarketingEventSessionRoomId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _keywords;
	private String _keywordsCurrentLanguageId;
	private long _slidesFileEntryId;
	private String _videoURL;
	private Date _startDate;
	private Date _endDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private MarketingEventSession _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.www.marketing.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.www.marketing.events.model.SocialLink;
import com.liferay.osb.www.marketing.events.model.SocialLinkModel;
import com.liferay.osb.www.marketing.events.model.SocialLinkSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SocialLink service. Represents a row in the &quot;OSB_SocialLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SocialLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SocialLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SocialLinkImpl
 * @see SocialLink
 * @see SocialLinkModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SocialLinkModelImpl extends BaseModelImpl<SocialLink>
	implements SocialLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a social link model instance should use the {@link SocialLink} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_SocialLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "socialLinkId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "marketingEventUserId", Types.BIGINT },
			{ "socialLinkTypeId", Types.BIGINT },
			{ "url", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("socialLinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketingEventUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("socialLinkTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_SocialLink (socialLinkId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,marketingEventUserId LONG,socialLinkTypeId LONG,url VARCHAR(150) null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_SocialLink";
	public static final String ORDER_BY_JPQL = " ORDER BY socialLink.socialLinkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_SocialLink.socialLinkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.www.marketing.events.model.SocialLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.www.marketing.events.model.SocialLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.www.marketing.events.model.SocialLink"),
			true);
	public static final long MARKETINGEVENTUSERID_COLUMN_BITMASK = 1L;
	public static final long SOCIALLINKTYPEID_COLUMN_BITMASK = 2L;
	public static final long SOCIALLINKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SocialLink toModel(SocialLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SocialLink model = new SocialLinkImpl();

		model.setSocialLinkId(soapModel.getSocialLinkId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMarketingEventUserId(soapModel.getMarketingEventUserId());
		model.setSocialLinkTypeId(soapModel.getSocialLinkTypeId());
		model.setUrl(soapModel.getUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SocialLink> toModels(SocialLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SocialLink> models = new ArrayList<SocialLink>(soapModels.length);

		for (SocialLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.www.marketing.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.www.marketing.events.model.SocialLink"));

	public SocialLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _socialLinkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSocialLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _socialLinkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SocialLink.class;
	}

	@Override
	public String getModelClassName() {
		return SocialLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("socialLinkId", getSocialLinkId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("marketingEventUserId", getMarketingEventUserId());
		attributes.put("socialLinkTypeId", getSocialLinkTypeId());
		attributes.put("url", getUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long socialLinkId = (Long)attributes.get("socialLinkId");

		if (socialLinkId != null) {
			setSocialLinkId(socialLinkId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long marketingEventUserId = (Long)attributes.get("marketingEventUserId");

		if (marketingEventUserId != null) {
			setMarketingEventUserId(marketingEventUserId);
		}

		Long socialLinkTypeId = (Long)attributes.get("socialLinkTypeId");

		if (socialLinkTypeId != null) {
			setSocialLinkTypeId(socialLinkTypeId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	@JSON
	@Override
	public long getSocialLinkId() {
		return _socialLinkId;
	}

	@Override
	public void setSocialLinkId(long socialLinkId) {
		_socialLinkId = socialLinkId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMarketingEventUserId() {
		return _marketingEventUserId;
	}

	@Override
	public void setMarketingEventUserId(long marketingEventUserId) {
		_columnBitmask |= MARKETINGEVENTUSERID_COLUMN_BITMASK;

		if (!_setOriginalMarketingEventUserId) {
			_setOriginalMarketingEventUserId = true;

			_originalMarketingEventUserId = _marketingEventUserId;
		}

		_marketingEventUserId = marketingEventUserId;
	}

	@Override
	public String getMarketingEventUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getMarketingEventUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setMarketingEventUserUuid(String marketingEventUserUuid) {
	}

	public long getOriginalMarketingEventUserId() {
		return _originalMarketingEventUserId;
	}

	@JSON
	@Override
	public long getSocialLinkTypeId() {
		return _socialLinkTypeId;
	}

	@Override
	public void setSocialLinkTypeId(long socialLinkTypeId) {
		_columnBitmask |= SOCIALLINKTYPEID_COLUMN_BITMASK;

		if (!_setOriginalSocialLinkTypeId) {
			_setOriginalSocialLinkTypeId = true;

			_originalSocialLinkTypeId = _socialLinkTypeId;
		}

		_socialLinkTypeId = socialLinkTypeId;
	}

	public long getOriginalSocialLinkTypeId() {
		return _originalSocialLinkTypeId;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SocialLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SocialLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SocialLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SocialLinkImpl socialLinkImpl = new SocialLinkImpl();

		socialLinkImpl.setSocialLinkId(getSocialLinkId());
		socialLinkImpl.setUserId(getUserId());
		socialLinkImpl.setUserName(getUserName());
		socialLinkImpl.setCreateDate(getCreateDate());
		socialLinkImpl.setModifiedDate(getModifiedDate());
		socialLinkImpl.setMarketingEventUserId(getMarketingEventUserId());
		socialLinkImpl.setSocialLinkTypeId(getSocialLinkTypeId());
		socialLinkImpl.setUrl(getUrl());

		socialLinkImpl.resetOriginalValues();

		return socialLinkImpl;
	}

	@Override
	public int compareTo(SocialLink socialLink) {
		long primaryKey = socialLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SocialLink)) {
			return false;
		}

		SocialLink socialLink = (SocialLink)obj;

		long primaryKey = socialLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SocialLinkModelImpl socialLinkModelImpl = this;

		socialLinkModelImpl._setModifiedDate = false;

		socialLinkModelImpl._originalMarketingEventUserId = socialLinkModelImpl._marketingEventUserId;

		socialLinkModelImpl._setOriginalMarketingEventUserId = false;

		socialLinkModelImpl._originalSocialLinkTypeId = socialLinkModelImpl._socialLinkTypeId;

		socialLinkModelImpl._setOriginalSocialLinkTypeId = false;

		socialLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SocialLink> toCacheModel() {
		SocialLinkCacheModel socialLinkCacheModel = new SocialLinkCacheModel();

		socialLinkCacheModel.socialLinkId = getSocialLinkId();

		socialLinkCacheModel.userId = getUserId();

		socialLinkCacheModel.userName = getUserName();

		String userName = socialLinkCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			socialLinkCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			socialLinkCacheModel.createDate = createDate.getTime();
		}
		else {
			socialLinkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			socialLinkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			socialLinkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		socialLinkCacheModel.marketingEventUserId = getMarketingEventUserId();

		socialLinkCacheModel.socialLinkTypeId = getSocialLinkTypeId();

		socialLinkCacheModel.url = getUrl();

		String url = socialLinkCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			socialLinkCacheModel.url = null;
		}

		return socialLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{socialLinkId=");
		sb.append(getSocialLinkId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", marketingEventUserId=");
		sb.append(getMarketingEventUserId());
		sb.append(", socialLinkTypeId=");
		sb.append(getSocialLinkTypeId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.www.marketing.events.model.SocialLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>socialLinkId</column-name><column-value><![CDATA[");
		sb.append(getSocialLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingEventUserId</column-name><column-value><![CDATA[");
		sb.append(getMarketingEventUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialLinkTypeId</column-name><column-value><![CDATA[");
		sb.append(getSocialLinkTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SocialLink.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SocialLink.class
		};
	private long _socialLinkId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _marketingEventUserId;
	private long _originalMarketingEventUserId;
	private boolean _setOriginalMarketingEventUserId;
	private long _socialLinkTypeId;
	private long _originalSocialLinkTypeId;
	private boolean _setOriginalSocialLinkTypeId;
	private String _url;
	private long _columnBitmask;
	private SocialLink _escapedModel;
}